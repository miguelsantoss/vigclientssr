import React from 'react';
import PropTypes from 'prop-types';
import _map from 'lodash/map';
import { Table, Segment, Header } from 'semantic-ui-react';
import withStyles from 'isomorphic-style-loader/lib/withStyles';
import s from './WebVulnerability.css';

class Vulnerability extends React.Component {
  static propTypes = {
    webvulnerability: PropTypes.shape({

    }).isRequired,
  };

  constructor(props) {
    super(props);
    this.state = {
      vulnerability: props.webvulnerability,
    };
  }

  renderVulnInfo = () => {
    const style = {
      tableCell: {
        padding: '5px',
        fontSize: '12px',
      },
    };
    const info = [
      {
        fieldName: 'ID',
        value: this.state.vulnerability.id,
        key: 'id',
      },
      {
        fieldName: 'Vulnerability ID',
        value: this.state.vulnerability.vid,
        key: 'vid',
      },
      {
        fieldName: 'Title',
        value: this.state.vulnerability.title,
        key: 'title',
      },
      {
        fieldName: 'Summary',
        value: this.state.vulnerability.summary,
        key: 'summary',
      },
      {
        fieldName: 'Impact',
        value: this.state.vulnerability.impact,
        key: 'impact',
      },
      {
        fieldName: 'Example',
        value: this.state.vulnerability.example,
        key: 'example',
      },
      {
        fieldName: 'Solution',
        value: this.state.vulnerability.solution,
        key: 'solution',
      },
      {
        fieldName: 'Port Number',
        value: this.state.vulnerability.port_number,
        key: 'port_number',
      },
      {
        fieldName: 'Protocol',
        value: this.state.vulnerability.protocol,
        key: 'protocol',
      },
      {
        fieldName: 'Risk Factor',
        value: this.state.vulnerability.risk_factor,
        key: 'risk_factor',
      },
      {
        fieldName: 'Exploitable',
        value: this.state.vulnerability.exploitable,
        key: 'exploitable',
      },
      {
        fieldName: 'Output',
        value: this.state.vulnerability.output,
        key: 'output',
      },
      {
        fieldName: 'Category',
        value: this.state.vulnerability.category,
        key: 'category',
      },
      {
        fieldName: 'CVSS Score',
        value: this.state.vulnerability.cvss_score,
        key: 'cve',
      },
      {
        fieldName: 'CVE',
        value: this.state.vulnerability.cve,
        key: 'cvss_score',
      },
    ];

    return _map(info, field => {
      const { fieldName, value } = field;
      const fieldValue =
        typeof value === 'string'
          ? value.split('\n').map((str, i) =>
              <span key={str.concat(i)}>
                {str}
                <br />
              </span>,
            )
          : value;
      return (
        <Table.Row
          style={field.key === 'id' ? { backgroundColor: '#c6c6c6' } : {}}
          key={field.key}
        >
          <Table.Cell
            disabled={!value && value !== 0}
            singleLine
            style={style.tableCell}
          >
            <b>
              {fieldName}
            </b>
          </Table.Cell>
          <Table.Cell disabled={!value && value !== 0} style={style.tableCell}>
            {fieldValue}
          </Table.Cell>
        </Table.Row>
      );
    });
  };

  render() {
    if (!this.state || !this.state.vulnerability) return null;
    const RED = '#da1c15';
    const YELLOW = '#f6ad26';
    const GREEN = '#7db346';
    const BLUE = '#5280fb';
    const colorCodes = [BLUE, GREEN, YELLOW, RED];
    const vulnerabilityColorCode =
      colorCodes[this.state.vulnerability.risk_factor];

    const textColor = vulnerabilityColorCode === RED ? '#f8f8f2' : '#000000';

    const style = {
      header: {
        color: textColor,
        backgroundColor: vulnerabilityColorCode,
        border: `1px solid${vulnerabilityColorCode}`,
        fill: vulnerabilityColorCode,
      },
      segment: {
        border: `1px solid${vulnerabilityColorCode}`,
        padding: '8px',
      },
      tableCell: {
        padding: '5px',
      },
    };

    return (
      <div>
        <Header style={style.header} attached="top">
          Vulnerability
        </Header>
        <Segment style={style.segment} attached>
          <Table celled striped selectable>
            <Table.Body>
              {this.renderVulnInfo()}
            </Table.Body>
          </Table>
        </Segment>
      </div>
    );
  }
}

export default withStyles(s)(Vulnerability);
